@page "/jobs"
@inject HttpClient Http

<PageTitle>Jobs</PageTitle>

<h1>Jobs</h1>

<h1 class="text-center my-4">Job Manager</h1>

<div class="container">
    <EditForm Model="newJob" OnValidSubmit="CreateJob">
        <div class="mb-3">
            <InputText class="form-control" @bind-Value="newJob.Title" placeholder="Title" />
        </div>
        <div class="mb-3">
            <InputText class="form-control" @bind-Value="newJob.Description" placeholder="Description" />
        </div>
        <div class="mb-3">
            <InputSelect class="form-select" @bind-Value="newJob.Status">
                @foreach (var status in Enum.GetValues<JobStatus>())
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>
        <button class="btn btn-primary" type="submit">Add Job</button>
    </EditForm>

    <hr />

    <ul class="list-group">
        @foreach (var job in jobs)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <h5>@job.Title</h5>
                    <p>@job.Description</p>
                    <span class="badge bg-info">@job.Status</span>
                </div>
                <div>
                    <button class="btn btn-sm btn-secondary me-2" @onclick="() => EditJob(job)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteJob(job.Id)">Delete</button>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    private List<Job> jobs = new();
    private Job newJob = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadJobs();
    }

    private async Task LoadJobs()
    {
        jobs = await Http.GetFromJsonAsync<List<Job>>("/api/jobs") ?? new();
    }

    private async Task CreateJob()
    {
        await Http.PostAsJsonAsync("/api/jobs", newJob);
        newJob = new();
        await LoadJobs();
    }

    private async Task DeleteJob(int id)
    {
        await Http.DeleteAsync($"/api/jobs/{id}");
        await LoadJobs();
    }

    private void EditJob(Job job)
    {
        newJob = new Job
            {
                Id = job.Id,
                Title = job.Title,
                Description = job.Description,
                Status = job.Status
            };
    }

    // You could add an "Update" button and handler for updates if needed

    public class Job
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public JobStatus Status { get; set; }
    }

    public enum JobStatus
    {
        New,
        InProgress,
        Done
    }
}

